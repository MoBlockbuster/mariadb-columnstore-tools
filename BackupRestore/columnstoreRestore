#!/bin/bash

VERBOSE=false
QUIET=false
COMPRESS=false
INNODB_BACKUP=false
INSTALL_DIR=/usr/local/mariadb/columnstore
LOGICAL=false
RAW=false
PM1=none
BACKUP_SERVER_LOCATION=none
PASSWORD=""
DRY_RUN=false
USER=root

###
# Print Fucntions
###

helpPrint () {
          ################################################################################
    echo "MariaDB ColumnStore Automated Backup Tool"
    echo "This tool is meant to automate the ColumnStore backup procedure documented at:"
    echo ""
    echo "https://mariadb.com/kb/en/mariadb/columnstore-backup-and-recovery/"
    echo ""
    echo "The tool is designed to be run on the system storing the backups. It requires"
    echo "the backup system to have passwordless login enabled for the account that"
    echo "MariaDB ColumnStore was installed and maintained. (Assumes root by default)"
    echo ""
    echo "This tool must be run as root or with sudo."
    echo ""
    echo "The default mode will utilize the backup systems configuration files including"
    echo "Columnstore.xml. This means if IP addresses or any other configuration changes"
    echo "needed should be made on backupServerLocation/Columnstore.xml" 
    echo ""
    echo "Usage: $0 [options] backupServerLocation restoreServerPM1"
    echo ""
    echo "pm1                       IP address of ColumnStore server"
    echo "                              (PM1 if Multi-Node install)"
    echo "backupServerLocation      Path to the directory for storing backup files."
    echo ""    
    echo "OPTIONS:"
    echo "-h,--help         Print this message and exit."
    echo "-v,--verbose      Print more verbose execution details."
    echo "-d,--dry-run      Dry run and executes rsync dry run with stats." 
    echo "-z,--compress     Utilize the compression option for rsync." 
    echo "--user=[user]     Change the user performing remote sessions. (Default: root)"
    echo ""
    echo "--install-dir=[PATH]  Change the install directory of ColumnStore."
    echo "                          Default: /usr/local/mariadb/columnstore"
}

verbosePrint () {

    if [ "$VERBOSE" = true ]; then
        echo $1 
    fi

}

# Parse command line options.
while getopts hdzvi:-: OPT; do
    case "$OPT" in
        h)
            helpPrint
            exit 0
            ;;
        d)
            DRY_RUN=true
            ;;            
        z)
            COMPRESS=true
            ;;       
        v)
            VERBOSE=true
            ;;            
        -)  LONG_OPTARG="${OPTARG#*=}"
            ## Parsing hack for the long style of arguments.
            case $OPTARG in
                help )  
                    helpPrint
                    exit 0
                    ;;            
                compress )  
                    COMPRESS=true 
                    ;;
                dry-run )
                    DRY_RUN=true
                    ;;
                install-dir=?* )  
                    INSTALL_DIR="$LONG_OPTARG" 
                    ;;
                user=?* )  
                    USER="$LONG_OPTARG" 
                    ;;                    
                install-dir* )  
                    echo "No arg for --$OPTARG option" >&2
                    exit 1
                    ;;
                user* )  
                    echo "No arg for --$OPTARG option" >&2
                    exit 1
                    ;;                        
                compress* )
                    echo "No arg allowed for --$OPTARG option" >&2
                    exit 1 
                    ;;
                dry-run* )
                    echo "No arg allowed for --$OPTARG option" >&2
                    exit 1
                    ;;                    
                '' )
                    break ;; # "--" terminates argument processing
                * )
                    echo "Illegal option --$OPTARG" >&2
                    exit 1
                    ;;
            esac 
            ;;       
        \?)
            # getopts issues an error message
            helpPrint
            exit 1
            ;;
    esac
done

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# We want 2 non-option argument. 
if [ $# -ne 2 ]; then
    if [ $# -lt 2 ]; then
        echo "Missing arguments." >&2
    fi
    if [ $# -gt 2 ]; then
        echo "Unknown extra arguments." >&2
    fi
    echo $USAGE >&2
    exit 1
fi

## Check rsync and xmllint are available
if ! type rsync > /dev/null; then
    echo "rsync is not installed. Please install and rerun." >&2
    exit 2
fi
if ! type xmllint > /dev/null; then
    echo "xmllint is not installed. Please install and rerun." >&2
    exit 2
fi
## setup rsync option lists
rsyncCommand="rsync "
rsyncOptions="-a"
if [ "$COMPRESS" = true ]; then
    rsyncOptions=$rsyncOptions"z" 
fi
if [ "$VERBOSE" = true ]; then
    rsyncOptions=$rsyncOptions""
    rsyncLongOptions=$rsyncLongOptions""
elif [ "$QUIET" = true ]; then
    rsyncOptions=$rsyncOptions"q" 
fi

rsyncCommand="$rsyncCommand$rsyncOptions"


#
BACKUP_SERVER_LOCATION=$1
PM1=$2

if ! ssh -q -o "BatchMode yes" $USER@$PM1 ls $INSTALL_DIR > /dev/null; then
    echo "ERROR: Cannot connect to $USER@$PM1" >&2
    echo "Check that ssh and passwordless login are available." >&2
    exit 255
fi

restoreServerConfigeDir=$BACKUP_SERVER_LOCATION/restoreConfig
if [ ! -e $restoreServerConfigeDir ]; then
    mkdir $restoreServerConfigeDir
fi

###############################################################################
# Get the system info from provided PM1
###############################################################################
getSystemInfo () {

# Go grab PM1's columnstore.xml file and parse it to find out information on system nodes.

command="$rsyncCommand $USER@$PM1:$INSTALL_DIR/etc/Columnstore.xml $restoreServerConfigeDir"

verbosePrint "$command"

## rsync it over
if ! $command; then
    echo "ERROR: Failed to get Columnstore.xml file from PM1" >&2
    exit 4
fi

command="$rsyncCommand $USER@$PM1:$INSTALL_DIR/releasenum $restoreServerConfigeDir"

verbosePrint "$command"

## rsync it over
if ! $command; then
    echo "ERROR: Failed to get releasenum file from PM1" >&2 
    exit 4
fi

source $BACKUP_SERVER_LOCATION/releasenum

backupVersion=$version
backupRelease=$release

source $restoreServerConfigeDir/releasenum

restoreVersion=$version
restoreRelease=$release

if [ $backupVersion != $restoreVersion ] || [ $backupRelease != $restoreRelease ]; then
    echo "ERROR: Version/Release differs from backups Version/Release" >&2 
    echo "Backup  = $backupVersion-$backupRelease" >&2 
    echo "Restore = $restoreVersion-$restoreRelease" >&2  
    exit 4
fi

## Reset rsync options if this is a dry run to print out stats data for transfers
if [ "$DRY_RUN" = true ]; then
    rsyncLongOptions=$rsyncLongOptions" --stats"
    rsyncOptions=$rsyncOptions"n"
    rsyncCommand="rsync "
    rsyncCommand="$rsyncCommand$rsyncOptions$rsyncLongOptions"
fi

## parse it
restore_systemName=$(xmllint --xpath 'string(//SystemName)' $restoreServerConfigeDir/Columnstore.xml)
restore_singleServerInstall=$(xmllint --xpath 'string(//SingleServerInstall)' $restoreServerConfigeDir/Columnstore.xml)
restore_serverTypeInstall=$(xmllint --xpath 'string(//ServerTypeInstall)' $restoreServerConfigeDir/Columnstore.xml)
restore_PMwithUM=$(xmllint --xpath 'string(//PMwithUM)' $restoreServerConfigeDir/Columnstore.xml)
restore_DBRootStorageType=$(xmllint --xpath 'string(//DBRootStorageType)' $restoreServerConfigeDir/Columnstore.xml)
restore_umModuleCount=$(xmllint --xpath "string(//ModuleCount2)" $restoreServerConfigeDir/Columnstore.xml)
restore_pmModuleCount=$(xmllint --xpath "string(//ModuleCount3)" $restoreServerConfigeDir/Columnstore.xml)
restore_DBRootCount=$(xmllint --xpath 'string(//DBRootCount)' $restoreServerConfigeDir/Columnstore.xml)
for (( dbRootID=1; dbRootID<=$restore_DBRootCount; dbRootID++ ))
do
    restore_DBRoot[$dbRootID]=$(xmllint --xpath "string(//DBRoot$dbRootID)" $restoreServerConfigeDir/Columnstore.xml)
done

if [ $restore_singleServerInstall == "n" ]; then
    detectError=false
    for (( moduleID=1; moduleID<=$restore_umModuleCount; moduleID++ ))
    do
        umModuleIP1=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-1-2)" $restoreServerConfigeDir/Columnstore.xml)
        umModuleIP2=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-2-2)" $restoreServerConfigeDir/Columnstore.xml)
        umModuleHostname1=$(xmllint --xpath "string(//ModuleHostName$moduleID-1-2)" $restoreServerConfigeDir/Columnstore.xml)
        umModuleHostname2=$(xmllint --xpath "string(//ModuleHostName$moduleID-2-2)" $restoreServerConfigeDir/Columnstore.xml)
        if ssh -q -o "BatchMode yes" $umModuleIP1 exit; then
            restore_umModuleIP[$moduleID]=$umModuleIP1
            restore_umModuleHostname[$moduleID]=$umModuleHostname1
        elif ssh -q -o "BatchMode yes" $umModuleIP2 exit; then
            restore_umModuleIP[$moduleID]=$umModuleIP2
            restore_umModuleHostname[$moduleID]=$umModuleHostname2
        else
            echo "ERROR: cannot Connect to UM$moduleID" >&2
            echo "(IP1 = $umModuleIP1)" >&2
            echo "(IP2 = $umModuleIP2)" >&2
            detectError=true
        fi
    done

    for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
    do
        pmModuleIP1=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-1-3)" $restoreServerConfigeDir/Columnstore.xml)
        pmModuleIP2=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-2-3)" $restoreServerConfigeDir/Columnstore.xml)
        pmModuleHostname1=$(xmllint --xpath "string(//ModuleHostName$moduleID-1-3)" $restoreServerConfigeDir/Columnstore.xml)
        pmModuleHostname2=$(xmllint --xpath "string(//ModuleHostName$moduleID-2-3)" $restoreServerConfigeDir/Columnstore.xml)
        
        if ssh -q -o "BatchMode yes" $pmModuleIP1 exit; then
            restore_pmModuleIP[$moduleID]=$pmModuleIP1
            restore_pmModuleHostname[$moduleID]=$pmModuleHostname1
        elif ssh -q -o "BatchMode yes" $pmModuleIP2 exit; then
            restore_pmModuleIP[$moduleID]=$pmModuleIP2
            restore_pmModuleHostname[$moduleID]=$pmModuleHostname2
        else
            echo "ERROR: Cannot connect to PM$moduleID" >&2
            echo "(IP1 = $pmModuleIP1)" >&2
            echo "(IP2 = $pmModuleIP2)" >&2
            detectError=true
        fi
        
        restore_pmModuleDBRootCount[$moduleID]=$(xmllint --xpath "string(//ModuleDBRootCount$moduleID-3)" $restoreServerConfigeDir/Columnstore.xml)      
    done

    if [ $restore_serverTypeInstall == "2" ]; then
        restore_umModuleCount=$restore_pmModuleCount
        for (( moduleID=1; moduleID<=$restore_umModuleCount; moduleID++ ))
        do
            restore_umModuleIP[$moduleID]=${restore_pmModuleIP[$moduleID]}
            restore_umModuleHostname[$moduleID]=${restore_pmModuleHostname[$moduleID]}     
        done
    fi
        
    if [ "$detectError" = true ]; then
        echo "Check that ssh and passwordless login are available." >&2
        exit 255 
    fi
    
elif [ $restore_singleServerInstall == "y" ]; then
    
    for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
    do
        restore_pmModuleDBRootCount[$moduleID]=$(xmllint --xpath "string(//ModuleDBRootCount$moduleID-3)" $restoreServerConfigeDir/Columnstore.xml)   
    done
    restore_umModuleCount=1
    restore_umModuleIP[1]=$PM1
    restore_pmModuleIP[1]=$PM1
       
else
    echo "Unknown install type = $installType" >&2
    exit 2
fi


###############################################################################
## Parse the backups config
###############################################################################
backup_systemName=$(xmllint --xpath 'string(//SystemName)' $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_singleServerInstall=$(xmllint --xpath 'string(//SingleServerInstall)' $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_serverTypeInstall=$(xmllint --xpath 'string(//ServerTypeInstall)' $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_PMwithUM=$(xmllint --xpath 'string(//PMwithUM)' $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_DBRootStorageType=$(xmllint --xpath 'string(//DBRootStorageType)' $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_umModuleCount=$(xmllint --xpath "string(//ModuleCount2)" $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_pmModuleCount=$(xmllint --xpath "string(//ModuleCount3)" $BACKUP_SERVER_LOCATION/Columnstore.xml)
backup_DBRootCount=$(xmllint --xpath 'string(//DBRootCount)' $BACKUP_SERVER_LOCATION/Columnstore.xml)

errorDetected=false
if [ $backup_singleServerInstall != $restore_singleServerInstall ]; then
    echo "ERROR: SINGLE and MULTI server installations detected:" >&2
    echo "Restore SingleServerInstall: $restore_singleServerInstall" >&2
    echo "Backup  SingleServerInstall: $backup_singleServerInstall" >&2
    errorDetected=true
elif [ $backup_serverTypeInstall != $restore_serverTypeInstall ]; then
    echo "ERROR: MISMATCH Server installation types detected:" >&2
    echo "Restore ServerInstallType: $restore_serverTypeInstall" >&2
    echo "Backup  ServerInstallType: $backup_serverTypeInstall" >&2
    errorDetected=true
elif [ $backup_PMwithUM != $restore_PMwithUM ]; then
    echo "ERROR: MISMATCH PM with UM installation detected:" >&2
    echo "Restore PMwithUM: $restore_PMwithUM" >&2
    echo "Backup  PMwithUM: $backup_PMwithUM" >&2
    errorDetected=true
fi
if [ "$errorDetected" = true ]; then
    exit 3
fi

for (( moduleID=1; moduleID<=$backup_umModuleCount; moduleID++ ))
do
    umModuleIP1=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-1-2)" $restoreServerConfigeDir/Columnstore.xml)
    umModuleIP2=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-2-2)" $restoreServerConfigeDir/Columnstore.xml)

    if [ ${restore_umModuleIP[$moduleID]} != $umModuleIP1 ] && [ ${restore_umModuleIP[$moduleID]} != $umModuleIP2 ]; then
        echo "ERROR: Restore and Backup IP addresses differ at UM$moduleID" >&2
        echo "(Restore  IP  = $restore_umModuleIP[$moduleID])" >&2
        echo "(Backup   IP1 = $umModuleIP1)" >&2
        echo "(Backup   IP2 = $umModuleIP2)" >&2
        detectError=true
    fi
done

for (( moduleID=1; moduleID<=$backup_pmModuleCount; moduleID++ ))
do

    pmModuleIP1=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-1-3)" $BACKUP_SERVER_LOCATION/Columnstore.xml)
    pmModuleIP2=$(xmllint --xpath "string(//ModuleIPAddr$moduleID-2-3)" $BACKUP_SERVER_LOCATION/Columnstore.xml)

    if [ ${restore_pmModuleIP[$moduleID]} != $pmModuleIP1 ] && [ ${restore_pmModuleIP[$moduleID]} != $pmModuleIP2 ]; then
        echo "ERROR: Restore and Backup IP addresses differ at PM$moduleID" >&2
        echo "(Restore  IP  = $restore_pmModuleIP[$moduleID])" >&2
        echo "(Backup   IP1 = $pmModuleIP1)" >&2
        echo "(Backup   IP2 = $pmModuleIP2)" >&2
        errorDetected=true
    fi

    backup_pmModuleDBRootCount[$moduleID]=$(xmllint --xpath "string(//ModuleDBRootCount$moduleID-3)" $BACKUP_SERVER_LOCATION/Columnstore.xml)       
done

if [ $backup_serverTypeInstall == "2" ]; then
    backup_umModuleCount=$backup_pmModuleCount
fi
###############################################################################
# Verify PM UM and dbroot config
###############################################################################
errorDetected=false
if [ $backup_umModuleCount != $restore_umModuleCount ]; then
    echo "ERROR: UM Module Count difference detected:" >&2
    echo "Restore UM Count: $restore_umModuleCount" >&2
    echo "Backup  UM Count: $backup_umModuleCount" >&2
    errorDetected=true
elif [ $backup_pmModuleCount != $restore_pmModuleCount ]; then
    echo "ERROR: UM Module Count difference detected:" >&2
    echo "Restore PM Count: $restore_pmModuleCount" >&2
    echo "Backup  PM Count: $backup_pmModuleCount" >&2
    errorDetected=true
elif [ $backup_DBRootCount != $restore_DBRootCount ]; then
    echo "ERROR: DBRoot Count difference detected:" >&2
    echo "Restore DBRoot Count: $restore_DBRootCount" >&2
    echo "Backup  DBRoot Count: $backup_DBRootCount" >&2
    errorDetected=true
else
    for (( moduleID=1; moduleID<=$backup_pmModuleCount; moduleID++ ))
    do
        if [ ${backup_pmModuleDBRootCount[$moduleID]} != ${restore_pmModuleDBRootCount[$moduleID]} ]; then
            echo "ERROR: PM Module $moduleID DBRoot Count difference detected:" >&2
            echo "Restore PM Module $moduleID DBRoot Count: ${restore_pmModuleDBRootCount[$moduleID]}" >&2
            echo "Backup PM Module $moduleID DBRoot Count: ${backup_pmModuleDBRootCount[$moduleID]}" >&2
            errorDetected=true
        fi      
    done
fi

if [ "$errorDetected" = true ]; then
    exit 3
fi

}

###############################################################################
# stopSystem
###############################################################################
stopSystem () {
if [ "$DRY_RUN" = false ]; then
    if [ "$VERBOSE" = true ]; then
        ssh $USER@$PM1 $INSTALL_DIR/bin/mcsadmin stopSystem y
    else
        echo "Stopping MariaDB ColumnStore"
        ssh $USER@$PM1 $INSTALL_DIR/bin/mcsadmin stopSystem y > /dev/null
    fi
fi
}


###############################################################################
# restartSystem
###############################################################################
restartSystem () {
if [ "$DRY_RUN" = false ]; then
    if [ "$VERBOSE" = true ]; then
        ssh $USER@$PM1 $INSTALL_DIR/bin/mcsadmin restartSystem y
    else
        echo "Restarting MariaDB ColumnStore"
        ssh $USER@$PM1 $INSTALL_DIR/bin/mcsadmin restartSystem y > /dev/null
    fi
    sleep 30
fi    
}

###############################################################################
# measureDiskSpace
###############################################################################
measureDiskSpace () {
##
## Theres probably a cleaner way to fix this up 
## get INSTALL_DIR df value and compare to sum of DU commands for that modules db roots
##
## For getting modules remapped based on dbrootID get moduleDBRootCount and Compare with Backups
## 
##
totalBackupSize=0
    for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
    do
        for (( moduleDBRootID=1; moduleDBRootID<=${restore_pmModuleDBRootCount[$moduleID]}; moduleDBRootID++ ))
        do
            thisRestoreDBrootID=$(xmllint --xpath "string(//ModuleDBRootID$moduleID-$moduleDBRootID-3)" $restoreServerConfigeDir/Columnstore.xml)
            thisRestoreSpaceFree=$(ssh $USER@${restore_pmModuleIP[$moduleID]} df -B1 ${restore_DBRoot[$thisRestoreDBrootID]} | awk 'NR==2 {print $4}')
            commandReturn=$(ssh $USER@${restore_pmModuleIP[$moduleID]} du -s -b ${restore_DBRoot[$thisRestoreDBrootID]})
            returnValues=($commandReturn)
            if [ ${returnValues[1]} == ${restore_DBRoot[$thisRestoreDBrootID]} ]; then
                thisRestoreSpaceUsed=${returnValues[0]}
            else
                echo "failed return from command: $commandReturn" >&2
                exit 2
            fi
            thisRestoreSpaceAvail=$(( $thisRestoreSpaceFree + $thisRestoreSpaceUsed ))
            moduleDBRootBackupDir="pm""$moduleID""dbroot""$moduleDBRootID"
            commandReturn=$(du -s -b $BACKUP_SERVER_LOCATION/$moduleDBRootBackupDir)
            returnValues=($commandReturn)
            if [ ${returnValues[1]} == $BACKUP_SERVER_LOCATION/$moduleDBRootBackupDir ]; then
                thisBackupSize=${returnValues[0]}
                totalBackupSize=$(( $totalBackupSize + $thisBackupSize))
                moduleBackupSize[$moduleID]=$(( ${moduleBackupSize[$moduleID]} + $thisBackupSize))
            else
                echo "failed return from command: $commandReturn" >&2
                exit 2
            fi
            #verbosePrint "SpaceAvail:     $thisRestoreSpaceAvail"
            #verbosePrint "SpaceNeeded:    $thisBackupSize"

            if (( $thisRestoreSpaceAvail < $thisBackupSize )); then
                echo "ERROR: Not enough space on backup system" >&2
                echo "(Needs = $thisBackupSize)" >&2
                echo "(Avail = $thisRestoreSpaceFree)" >&2
                exit 3
            fi
        done
    done
}

###############################################################################
# monitorProgress
###############################################################################
monitorProgress () {
percentDone=0
oldSizeCopied=0
totalSizeCopied=0
sizeOfData=$1
moduleID=$2

while [ $percentDone -lt 99 ]
do
    oldSizeCopied=$totalSizeCopied
    totalSizeCopied=0
    for (( moduleDBRootID=1; moduleDBRootID<=${restore_pmModuleDBRootCount[$moduleID]}; moduleDBRootID++ ))
    do
        thisRestoreDBrootID=$(xmllint --xpath "string(//ModuleDBRootID$moduleID-$moduleDBRootID-3)" $restoreServerConfigeDir/Columnstore.xml)
        commandReturn=$(ssh $USER@${restore_pmModuleIP[$moduleID]} du -s -b ${restore_DBRoot[$thisRestoreDBrootID]})
        returnValues=($commandReturn)
        if [ ${returnValues[1]} == ${restore_DBRoot[$thisRestoreDBrootID]} ]; then
            totalSizeCopied=$(($totalSizeCopied + ${returnValues[0]}))
        else
            echo "failed return from command: $commandReturn" >&2
        fi
    done
    # Compute the percentage.
    percentDone=$(( $(( $totalSizeCopied * 100 )) / $sizeOfData ))
    # Compute the number of blocks to represent the percentage.
    numberSymbols=$(( percentDone / 4 ))
    # Create the progress bar string.
    bar="Progress ["
    for (( num=0; num<=25; num++ ))
    do
        if (( $num < $numberSymbols )); then
            bar=$bar"="
        elif (( $num == $numberSymbols )); then
            bar=$bar">"
        else
            bar=$bar" "
        fi
    done
    # Print the progress bar.
    sleepInt=5
    diff=$(( $totalSizeCopied - $oldSizeCopied )) 
    if (( $diff > 1000000 )); then
    rate=$(( $diff / 1000000 / $sleepInt ))" Mbps "
    elif (( $diff > 1000 )); then
    rate=$(( $diff / 1000 / $sleepInt ))" kbps "
    else
    rate=$diff" bits/second "
    fi
    if (( $diff > 0 )); then   
        remainingCopy=$(( $sizeOfData - $totalSizeCopied ))
        remainingSeconds=$(( $remainingCopy / $(( $diff / $sleepInt )) ))
        printHours=$(( $remainingSeconds / 3600 ))
        printMinutes=$(( $(( $remainingSeconds % 3600 )) / 60 ))
        printSeconds=$(( $remainingSeconds % 60 ))
    else
        printSeconds=0
        remainingMinutes=0
        remainingHours=0
    fi
    bar=$bar"] ($percentDone%) $rate "
    line=$(printf "%02d:%02d:%02d %s" $printHours $printMinutes $printSeconds "Approx Time Remaining          ")
    echo -en "${bar}${line}\r"
    sleep $sleepInt
done

percentDone=100
bar="Progress [=========================>] ($percentDone%) $rate "
line=$(printf "%02d:%02d:%02d %s" $printHours $printMinutes $printSeconds "Approx Time Remaining          ")
echo -en "${bar}${line}\r"

}


###############################################################################
# Restore Config
###############################################################################
restoreConfig () {
echo "Config Restore..."
#stopSystem

backupCnfDir="cnf"
command="$rsyncCommand $BACKUP_SERVER_LOCATION/Columnstore.xml $USER@$PM1:$INSTALL_DIR/etc/"
if [ "$DRY_RUN" = false ]; then
    verbosePrint "$command"
    if ! $command; then
        echo "ERROR: Failed to get my.cnf file from PM1" >&2
        exit 4
    fi
else
    echo "$command"
    $command
fi
if [ $BACKUP_SERVER_LOCATION/$backupCnfDir ]; then
    command="$rsyncCommand $BACKUP_SERVER_LOCATION/$backupCnfDir $USER@$PM1:$INSTALL_DIR/mysql/"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        if ! $command; then
            echo "ERROR: Failed to get my.cnf file from PM1" >&2
            exit 4
        fi
    else
        echo "$command"
        $command
    fi
fi
if [ "$DRY_RUN" = false ]; then
    restartSystem
fi
echo -e "\nDONE"
}


###############################################################################
# Restore PM
###############################################################################
restorePMs () {
echo "Restoring PMs"
dir=$(mktemp -d)
## loop the pmModules
for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
do
    echo "Restoring PM$moduleID"
    for (( moduleDBRootID=1; moduleDBRootID<=${restore_pmModuleDBRootCount[$moduleID]}; moduleDBRootID++ ))
    do
        thisRestoreDBrootID=$(xmllint --xpath "string(//ModuleDBRootID$moduleID-$moduleDBRootID-3)" $restoreServerConfigeDir/Columnstore.xml)
        pmBackupDir="pm""$moduleID""dbroot""$moduleDBRootID"
        if [ -e $BACKUP_SERVER_LOCATION/$pmBackupDir ]; then
            echo "Restoring $pmBackupDir"
            command="$rsyncCommand $BACKUP_SERVER_LOCATION/$pmBackupDir/data?/ $USER@${restore_pmModuleIP[$moduleID]}:${restore_DBRoot[$thisRestoreDBrootID]}"
            if [ "$DRY_RUN" = false ]; then
                verbosePrint "$command"
                { $command ; echo "$?" > "/$dir/$pmBackupDir" ; } &
            else
                echo "$command"
                $command
            fi
        fi
    done
    if [ "$DRY_RUN" = false ]; then
        monitorProgress ${moduleBackupSize[$moduleID]} $moduleID
        wait
        echo ""
    fi
done
if [ "$DRY_RUN" = false ]; then
    for file in "$dir"/*; do
        if [ $(<"$file") != 0 ]; then
            echo "ERROR: RSYNC failed $file with Error: $(<"$file")" >&2
            echo "Action must be taken for any rsync errors before system is restarted." >&2                       
            exit 6
        fi
    done
fi
rm -r "$dir"
echo -e "\nDONE"
}


###############################################################################
# Restore UM
###############################################################################
restoreUM () {
echo "Restoring UM"

if [ -e $BACKUP_SERVER_LOCATION/MySQLDatabases.sql ]; then
    echo "Restoring MySQLDatabases.sql"
    command="$rsyncCommand $BACKUP_SERVER_LOCATION/MySQLDatabases.sql $USER@${restore_umModuleIP[1]}:/tmp/"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        $command
    else
        echo "$command"
        $command
    fi
    command="ssh $USER@${restore_umModuleIP[1]} $INSTALL_DIR/mysql/bin/mysql --defaults-file=/usr/local/mariadb/columnstore/mysql/my.cnf -u root < /tmp/MySQLDatabases.sql"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        if ! $command; then
            echo "ERROR: COMMAND: $command -- returned a failure" >&2
            echo "This needs to be resolved in order to continue restoring system." >&2
            echo "Verify all configuration settings are accurate at $BACKUP_SERVER_LOCATION/Columnstore.xml" >&2                        
            exit 5
        fi
    else
        echo "$command"
    fi
else
    stopSystem
    for (( moduleID=1; moduleID<=$restore_umModuleCount; moduleID++ )) 
    do
        umBackupDir="um""$moduleID"
        if [ -e $BACKUP_SERVER_LOCATION/$umBackupDir ]; then
            echo "Restoring $umBackupDir"
            command="$rsyncCommand $BACKUP_SERVER_LOCATION/$umBackupDir/db/ $USER@${restore_umModuleIP[$moduleID]}:$INSTALL_DIR/mysql/db"
            if [ "$DRY_RUN" = false ]; then
                verbosePrint "$command"
                $command &
            else
                echo "$command"
                $command
            fi
        fi
    done
    echo "Waiting for UM restore to complete..."
    #monitorProgress $totalBackupSize
    wait
    restartSystem
    echo -e "\nDONE"
fi
}

###############################################################################
# Restore InnoDB
###############################################################################
restoreInnoDB () {
innoDbBackupDIR="innoDBBackup"
dbdir=$INSTALL_DIR/mysql/db
if [ -e $BACKUP_SERVER_LOCATION/$innoDbBackupDIR ]; then
    echo "Restore InnoDB from backup"
    command="$rsyncCommand $BACKUP_SERVER_LOCATION/$innoDbBackupDIR/ibdata? $USER@${restore_umModuleIP[1]}:$dbdir"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        $command &
    else
        echo "$command"
        $command
    fi
    command="$rsyncCommand $BACKUP_SERVER_LOCATION/$innoDbBackupDIR/ib_logfile? $USER@${restore_umModuleIP[1]}:$dbdir"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        $command &
    else
        echo "$command"
        $command
    fi
    
    command="$rsyncCommand $BACKUP_SERVER_LOCATION/$innoDbBackupDIR/$dbdir/ $USER@${restore_umModuleIP[1]}:$dbdir/"
    if [ "$DRY_RUN" = false ]; then
        verbosePrint "$command"
        $command &
    else
        echo "$command"
        $command         
    fi
else
    echo "No InnoDB backup present"
fi
}

###############################################################################
# Main Execution
###############################################################################
main () {


## Get the system info from xml file
getSystemInfo

## Debug Prints
verbosePrint ""
verbosePrint "Configuration:"
verbosePrint ""
verbosePrint "Server PM1 address = $PM1"
verbosePrint "Backup Server location = $BACKUP_SERVER_LOCATION"
verbosePrint ""
verbosePrint "Restore System:"
verbosePrint ""
verbosePrint "SystemName: $restore_systemName"
verbosePrint "SingleServerInstall: $restore_singleServerInstall"
verbosePrint "serverTypeInstall:  $restore_serverTypeInstall"
verbosePrint "PMwithUM:  $restore_PMwithUM"
verbosePrint "DBRootStorageType: $restore_DBRootStorageType"
verbosePrint ""
verbosePrint "UMs: $restore_umModuleCount"
verbosePrint "PMs: $restore_pmModuleCount"
for (( moduleID=1; moduleID<=$restore_umModuleCount; moduleID++ ))
do
    verbosePrint "um$moduleID ip ${restore_umModuleIP[$moduleID]}"
    verbosePrint "um$moduleID host ${restore_umModuleHostname[$moduleID]}"
    verbosePrint ""
done

for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
do
    verbosePrint "pm$moduleID ip ${restore_pmModuleIP[$moduleID]}"
    verbosePrint "pm$moduleID host ${restore_pmModuleHostname[$moduleID]}"
    verbosePrint "pm$moduleID DBRootCount: ${restore_pmModuleDBRootCount[$moduleID]}"
    verbosePrint ""
done

verbosePrint "DBRootCount: $restore_DBRootCount"
for (( dbRootID=1; dbRootID<=$restore_DBRootCount; dbRootID++ ))
do
    verbosePrint "DBRoot$dbRootID: ${restore_DBRoot[$dbRootID]}"
done

verbosePrint ""
verbosePrint "Backup System:"
verbosePrint ""
verbosePrint "SystemName: $backup_systemName"
verbosePrint "SingleServerInstall: $backup_singleServerInstall"
verbosePrint "serverTypeInstall:  $backup_serverTypeInstall"
verbosePrint "PMwithUM:  $backup_PMwithUM"
verbosePrint "DBRootStorageType: $backup_DBRootStorageType"
verbosePrint ""
verbosePrint "UMs: $backup_umModuleCount"
verbosePrint "PMs: $backup_pmModuleCount"

for (( moduleID=1; moduleID<=$restore_pmModuleCount; moduleID++ ))
do
    verbosePrint "pm$moduleID DBRootCount: ${backup_pmModuleDBRootCount[$moduleID]}"
done

verbosePrint "DBRootCount: $backup_DBRootCount"
verbosePrint ""

## Measure disk space usage and compare to available
measureDiskSpace

restoreConfig

## restore UM
restoreUM

# suspend db writes
stopSystem

## Check and restore InnoDB backup
restoreInnoDB

## restore PMs 
restorePMs

## resume db writes
restartSystem

exit 0

}

###############################################################################
# RUN IT
###############################################################################
main

exit 0

