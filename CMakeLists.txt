CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)

IF(UNIX)
    # Avoid warnings in higher versions
    if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
        CMAKE_POLICY(VERSION 2.8)
    endif()

    # explicitly set the policy to OLD
    # (cannot use NEW, not everyone is on cmake-2.8.12 yet)
    IF(POLICY CMP0022)
       CMAKE_POLICY(SET CMP0022 OLD)
    ENDIF()

    # We use the LOCATION target property (CMP0026)
    # and get_target_property() for non-existent targets (CMP0045)
    # and INSTALL_NAME_DIR (CMP0042)
    IF(CMAKE_VERSION VERSION_EQUAL "3.0.0" OR
        CMAKE_VERSION VERSION_GREATER "3.0.0")
        CMAKE_POLICY(SET CMP0026 OLD)
        CMAKE_POLICY(SET CMP0045 OLD)
        CMAKE_POLICY(SET CMP0042 OLD)
    ENDIF()
ENDIF(UNIX)

MESSAGE(STATUS "Running cmake version ${CMAKE_VERSION}")

option(DEB "Build a DEB" OFF)
option(RPM "Build an RPM" OFF)

# Generate "something" to trigger cmake rerun when VERSION changes
CONFIGURE_FILE(
  ${CMAKE_SOURCE_DIR}/VERSION
  ${CMAKE_BINARY_DIR}/VERSION.dep
)

# Read value for a variable from VERSION.

MACRO(COLUMNSTORE_GET_CONFIG_VALUE keyword var)
  IF(NOT ${var})
    FILE (STRINGS ${CMAKE_SOURCE_DIR}/VERSION str REGEX "^[ ]*${keyword}=")
    IF(str)
      STRING(REPLACE "${keyword}=" "" str ${str})
      STRING(REGEX REPLACE  "[ ].*" ""  str "${str}")
      SET(${var} ${str})
    ENDIF()
  ENDIF()
ENDMACRO()

MACRO(GET_COLUMNSTORE_VERSION)
  COLUMNSTORE_GET_CONFIG_VALUE("COLUMNSTORE_VERSION_MAJOR" MAJOR_VERSION)
  COLUMNSTORE_GET_CONFIG_VALUE("COLUMNSTORE_VERSION_MINOR" MINOR_VERSION)
  COLUMNSTORE_GET_CONFIG_VALUE("COLUMNSTORE_VERSION_PATCH" PATCH_VERSION)
  COLUMNSTORE_GET_CONFIG_VALUE("COLUMNSTORE_VERSION_EXTRA" EXTRA_VERSION)
  COLUMNSTORE_GET_CONFIG_VALUE("COLUMNSTORE_VERSION_RELEASE" RELEASE_VERSION)
  

  IF(NOT "${MAJOR_VERSION}" MATCHES "[0-9]+" OR
    NOT "${MINOR_VERSION}" MATCHES "[0-9]+" OR
    NOT "${PATCH_VERSION}" MATCHES "[0-9]+")
    MESSAGE(FATAL_ERROR "VERSION file cannot be parsed.")
  ENDIF()

  SET(VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${EXTRA_VERSION}")
  MESSAGE(STATUS "MariaDB-Columnstore ${VERSION}")
  SET(CPACK_PACKAGE_VERSION_MAJOR ${MAJOR_VERSION})
  SET(CPACK_PACKAGE_VERSION_MINOR ${MINOR_VERSION})
  SET(CPACK_PACKAGE_VERSION_PATCH ${PATCH_VERSION}${EXTRA_VERSION})
  SET(PACKAGE_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${EXTRA_VERSION}")
  SET(PACKAGE_RELEASE "${RELEASE_VERSION}")
ENDMACRO()

exec_program("git"
    ${CMAKE_CURRENT_SOURCE_DIR}
    ARGS "describe --match=NeVeRmAtCh --always --dirty"
    OUTPUT_VARIABLE GIT_VERSION)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/gitversion.in ${CMAKE_CURRENT_BINARY_DIR}/gitversion IMMEDIATE)

# Get columnstore version
GET_COLUMNSTORE_VERSION()

SET(CPACK_PACKAGE_NAME "MariaDB-columnstore-backup")
SET(ENGINE_ARCH "amd64")

SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MariaDB ColumnStore: A Scale out Columnar storage engine for MariaDB")
SET(CPACK_PACKAGE_URL "http://www.mariadb.com")
SET(CPACK_PACKAGE_CONTACT "MariaDB Corporation Ab")
SET(CPACK_PACKAGE_SUMMARY "MariaDB ColumnStore: A Scale out Columnar storage engine for MariaDB")
SET(CPACK_PACKAGE_VENDOR "MariaDB Corporation Ab")
SET(CPACK_PACKAGE_LICENSE "Copyright (c) 2018 MariaDB Corporation Ab., all rights reserved; redistributable under the terms of the BSL, see the file LICENSE.txt for details.")

IF(UNIX)
    SET(CPACK_PACKAGE_RELOCATABLE FALSE)
ENDIF(UNIX)

SET (ETCDIR "/etc/columnstore")
SET (MARIADIR "/var/lib/mysql")
IF (RPM)
    SET (MYCNFDIR   "/etc/my.cnf.d")
    SET (BINDIR     "/usr/bin")
    SET (SUPPORTDIR "/usr/share/columnstore")
ELSEIF (DEB)
    SET (MYCNFDIR   "/etc/mysql/conf.d")
    SET (BINDIR     "/usr/bin")
    SET (SUPPORTDIR "/usr/share/columnstore")
ELSE()
    # TODO: prefix should probably apply here
    SET (MYCNFDIR   "/etc/mysql")
    SET (BINDIR     "/usr/local/bin")
    SET (SUPPORTDIR "/usr/local/share/columnstore")
ENDIF()

ADD_SUBDIRECTORY(backuprestore)

IF(UNIX)
    INSTALL(FILES COPYRIGHT.txt LICENSE.txt README.md VERSION DESTINATION ${SUPPORTDIR}/backuprestore )
    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/gitversion DESTINATION ${SUPPORTDIR}/backuprestore )
ENDIF(UNIX)

IF(DEB)

  CMAKE_MINIMUM_REQUIRED(VERSION 3.4)

  SET(CPACK_GENERATOR "DEB")

  IF (NOT CPACK_DEBIAN_PACKAGE_VERSION)
      SET (CPACK_DEBIAN_PACKAGE_VERSION ${PACKAGE_VERSION})
  ENDIF()
  IF (NOT CPACK_DEBIAN_PACKAGE_RELEASE)
      SET (CPACK_DEBIAN_PACKAGE_RELEASE ${PACKAGE_RELEASE})
  ENDIF()

  SET(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
  SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-${ENGINE_ARCH}-${DEB}")

  SET(CPACK_DEBIAN_PACKAGE_LICENSE "BSL")
  SET(CPACK_DEBIAN_PACKAGE_RELOCATABLE FALSE)
  SET(CPACK_DEBIAN_PACKAGE_URL ${CPACK_PACKAGE_URL})
  SET(CPACK_DEBIAN_PACKAGE_SUMMARY ${CPACK_PACKAGE_SUMMARY})
  SET(CPACK_DEBIAN_PACKAGE_VENDOR ${CPACK_PACKAGE_VENDOR})
  SET(CPACK_DEBIAN_PACKAGE_LICENSE ${CPACK_PACKAGE_LICENSE})

  SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})

  SET(CPACK_DEBIAN_PACKAGE_PROVIDES "MariaDB-columnstore-backup")
  SET(CPACK_DEBIAN_PACKAGE_DEPENDS "rsync")
  SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)

  INCLUDE (CPack)

ENDIF()

IF(RPM)

    SET(CPACK_GENERATOR "RPM")

    IF (NOT CPACK_RPM_PACKAGE_VERSION)
        SET (CPACK_RPM_PACKAGE_VERSION ${PACKAGE_VERSION})
    ENDIF()
    IF (NOT CPACK_RPM_PACKAGE_RELEASE)
        SET (CPACK_RPM_PACKAGE_RELEASE ${PACKAGE_RELEASE})
    ENDIF()

    SET(CPACK_RPM_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-${ENGINE_ARCH}-${RPM}")

    SET(CPACK_RPM_PACKAGE_LICENSE "BSL")
    SET(CPACK_RPM_PACKAGE_RELOCATABLE FALSE)
    SET(CPACK_RPM_PACKAGE_GROUP "Applications/Databases")
    SET(CPACK_RPM_PACKAGE_URL ${CPACK_PACKAGE_URL})
    SET(CPACK_RPM_PACKAGE_SUMMARY ${CPACK_PACKAGE_SUMMARY})
    SET(CPACK_RPM_PACKAGE_VENDOR ${CPACK_PACKAGE_VENDOR})
    SET(CPACK_RPM_PACKAGE_LICENSE ${CPACK_PACKAGE_LICENSE})

    SET(CPACK_RPM_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})

    # "set/append array" - append a set of strings, separated by a space
    MACRO(SETA var)
        FOREACH(v ${ARGN})
            SET(${var} "${${var}} ${v}")
        ENDFOREACH()
    ENDMACRO(SETA)

    SETA(CPACK_RPM_PACKAGE_PROVIDES "MariaDB-columnstore-backup")
    SETA(CPACK_RPM_PACKAGE_REQUIRES "rsync")

    SET(CPACK_RPM_SPEC_MORE_DEFINE "${CPACK_RPM_SPEC_MORE_DEFINE}
        %define ignore \#
    ")

    SET(ignored
        "%ignore /usr"
        "%ignore /usr/local"
    )

    SET(CPACK_RPM_USER_FILELIST ${ignored})

    INCLUDE (CPack)

ENDIF()

MESSAGE(STATUS "-----------------------------------------------")
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")
MESSAGE(STATUS "RPM = ${RPM}")
MESSAGE(STATUS "DEB = ${DEB}")
MESSAGE(STATUS "Change a value with: cmake -D<Variable>=<Value>")
MESSAGE(STATUS "------------------------------------------------")
MESSAGE(STATUS)

